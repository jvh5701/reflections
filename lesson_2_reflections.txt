1. What happens when you initialize a repository? Why do you need to do
it?

When a repository is initialized, the .git directory is created.  You
need to do this so that the relevant data for git is created.

2. How is the staging area different from the working directory and
repository? What value do you think it offers?

The staging area is the place to which items are added prior to making a
commit. A commit will add the files in the staging area to the
repository.  The working directory is simply the directory in which the
files exist.  The concept of a staging area allows users to fine tune
which changes are included in any given commit to the repository.

3. How can you use the staging area to make sure you have one commit per
logical change?

You can add only the files that were edited in the logical change to the
staging area rather than every file that was changed since the last
commit.

4. What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Branches would be helpful in working on an experimental change without
affecting the master branch, or when working on a version of a program
that is different from the production version.  A master branch could
represent production code while a development branch could be used to
test features for a regularly scheduled code release.

5. How do the diagrams help you visualize the branch structure?

Diagrams are a useful tool in seeing how individual commits make up a
branch.  A diagram can illustrate a branch by showing the master branch
as a straight line. Any branches shoot off from one of the master branch
commits.  The branch can continue until it is merged back into the
master branch.  Diagrams can also be a useful tool to see what commits
are unreachable from a given point on the tree structure.  

6. What is the result of merging two branches together? Why do we represent the 
diagram the way we do?

When two branches are merged together, the commits combined and any files 
with differences between the two branches are combined where possible. The 
resulting commit can now be used to traverse the commits of either branch. The 
diagram is represented the way it is, since both branches are being combined.

7. What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

A pro of Git's automatic merging is that it reduces the amount of work required
to combine two people's work on the same file.  A con is that the merge process
cannot always resolve conflicts, so user interaction is still required.