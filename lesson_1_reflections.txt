How did viewing a diff between two versions of a file help you see the bug
that was introduced?

The diff command shows the specific lines where two input files differ.  This 
allows developers to see the specific lines that changed between two files.
The changes are going to be the source of any existing bugs.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Having access to the entire history of a file allows you to quickly review 
changes between working and non-working versions to pinpoint changes rather 
than manually reading through line by line looking for typos or logic errors.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
dogs does?

The pros are that commits are intentionally chosen and likely represent a
logical change in the file.  The cons are that it could miss out on changes 
that are lost due to user error or computer failure.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git and Google Docs where developed for different purposes.  Google Drive, which
is the storage solution, is home to Docs, Sheets, and Slides.  Each of these
web apps was meant to serve a purpose in replicating the functions of the 
Microsoft Office suite of programs.  In the Docs setup, the idea is that a user
will be creating a file that is independent of the other files that are created.
That file can be jointly edited, and change tracking of multiple users is 
useful, but there is no assumed connection between the different files.  Git was
made for tracking programs, which are often comprised of multiple files of code.
Changes across different files are related in most cases, it is therefore useful
to understand these relations.

How can you use the commands git log and git diff to view the history of files?

The command git log will display the log of all commits, featuring commit id and
notes.  You can take the commit id from any two commits and use git diff to 
figure out what lines where added or removed from files between those two 
commits.

How might using version control make you more confident to make changes that
could break something?

Using version control, you can easily revert to a previous working version of a
project.  If you want to introduce a change that might break something, you
don't have to worry about finding where the error was introduced, you can 
simply roll back all the changes.

Now that you have your workspace set up, what do you want to try using Git for?

I want to try to use Git to commit changes and modify projects.
